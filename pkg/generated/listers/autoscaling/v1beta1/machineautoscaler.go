/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright 2020 Red Hat, Inc.
 *
 */
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/openshift/cluster-autoscaler-operator/pkg/apis/autoscaling/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MachineAutoscalerLister helps list MachineAutoscalers.
// All objects returned here must be treated as read-only.
type MachineAutoscalerLister interface {
	// List lists all MachineAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MachineAutoscaler, err error)
	// MachineAutoscalers returns an object that can list and get MachineAutoscalers.
	MachineAutoscalers(namespace string) MachineAutoscalerNamespaceLister
	MachineAutoscalerListerExpansion
}

// machineAutoscalerLister implements the MachineAutoscalerLister interface.
type machineAutoscalerLister struct {
	indexer cache.Indexer
}

// NewMachineAutoscalerLister returns a new MachineAutoscalerLister.
func NewMachineAutoscalerLister(indexer cache.Indexer) MachineAutoscalerLister {
	return &machineAutoscalerLister{indexer: indexer}
}

// List lists all MachineAutoscalers in the indexer.
func (s *machineAutoscalerLister) List(selector labels.Selector) (ret []*v1beta1.MachineAutoscaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MachineAutoscaler))
	})
	return ret, err
}

// MachineAutoscalers returns an object that can list and get MachineAutoscalers.
func (s *machineAutoscalerLister) MachineAutoscalers(namespace string) MachineAutoscalerNamespaceLister {
	return machineAutoscalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MachineAutoscalerNamespaceLister helps list and get MachineAutoscalers.
// All objects returned here must be treated as read-only.
type MachineAutoscalerNamespaceLister interface {
	// List lists all MachineAutoscalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MachineAutoscaler, err error)
	// Get retrieves the MachineAutoscaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.MachineAutoscaler, error)
	MachineAutoscalerNamespaceListerExpansion
}

// machineAutoscalerNamespaceLister implements the MachineAutoscalerNamespaceLister
// interface.
type machineAutoscalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MachineAutoscalers in the indexer for a given namespace.
func (s machineAutoscalerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MachineAutoscaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MachineAutoscaler))
	})
	return ret, err
}

// Get retrieves the MachineAutoscaler from the indexer for a given namespace and name.
func (s machineAutoscalerNamespaceLister) Get(name string) (*v1beta1.MachineAutoscaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("machineautoscaler"), name)
	}
	return obj.(*v1beta1.MachineAutoscaler), nil
}
